// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/server.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PublishRequest struct {
	Topic                string            `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Message              []byte            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Metadata             map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab1295f5fa4f9da, []int{0}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PublishRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PublishRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type PublishResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab1295f5fa4f9da, []int{1}
}

func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

type SubscribeRequest struct {
	Topic                string                `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	SubscriptionId       string                `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Filter               map[string]string     `protobuf:"bytes,3,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RetentionPeriod      *wrappers.UInt64Value `protobuf:"bytes,4,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	VisibilityTimeout    *wrappers.UInt64Value `protobuf:"bytes,5,opt,name=visibility_timeout,json=visibilityTimeout,proto3" json:"visibility_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab1295f5fa4f9da, []int{2}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SubscribeRequest) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *SubscribeRequest) GetFilter() map[string]string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *SubscribeRequest) GetRetentionPeriod() *wrappers.UInt64Value {
	if m != nil {
		return m.RetentionPeriod
	}
	return nil
}

func (m *SubscribeRequest) GetVisibilityTimeout() *wrappers.UInt64Value {
	if m != nil {
		return m.VisibilityTimeout
	}
	return nil
}

type SubscribeResponse struct {
	MessageId            string            `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Message              []byte            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Metadata             map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab1295f5fa4f9da, []int{3}
}

func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *SubscribeResponse) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SubscribeResponse) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type AckRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	SubscriptionId       string   `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	MessageId            string   `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckRequest) Reset()         { *m = AckRequest{} }
func (m *AckRequest) String() string { return proto.CompactTextString(m) }
func (*AckRequest) ProtoMessage()    {}
func (*AckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab1295f5fa4f9da, []int{4}
}

func (m *AckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckRequest.Unmarshal(m, b)
}
func (m *AckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckRequest.Marshal(b, m, deterministic)
}
func (m *AckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckRequest.Merge(m, src)
}
func (m *AckRequest) XXX_Size() int {
	return xxx_messageInfo_AckRequest.Size(m)
}
func (m *AckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AckRequest proto.InternalMessageInfo

func (m *AckRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *AckRequest) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *AckRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

type AckResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckResponse) Reset()         { *m = AckResponse{} }
func (m *AckResponse) String() string { return proto.CompactTextString(m) }
func (*AckResponse) ProtoMessage()    {}
func (*AckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab1295f5fa4f9da, []int{5}
}

func (m *AckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckResponse.Unmarshal(m, b)
}
func (m *AckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckResponse.Marshal(b, m, deterministic)
}
func (m *AckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckResponse.Merge(m, src)
}
func (m *AckResponse) XXX_Size() int {
	return xxx_messageInfo_AckResponse.Size(m)
}
func (m *AckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AckResponse proto.InternalMessageInfo

type DeleteTopicRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTopicRequest) Reset()         { *m = DeleteTopicRequest{} }
func (m *DeleteTopicRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTopicRequest) ProtoMessage()    {}
func (*DeleteTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab1295f5fa4f9da, []int{6}
}

func (m *DeleteTopicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTopicRequest.Unmarshal(m, b)
}
func (m *DeleteTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTopicRequest.Marshal(b, m, deterministic)
}
func (m *DeleteTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTopicRequest.Merge(m, src)
}
func (m *DeleteTopicRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteTopicRequest.Size(m)
}
func (m *DeleteTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTopicRequest proto.InternalMessageInfo

func (m *DeleteTopicRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type DeleteTopicResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTopicResponse) Reset()         { *m = DeleteTopicResponse{} }
func (m *DeleteTopicResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteTopicResponse) ProtoMessage()    {}
func (*DeleteTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab1295f5fa4f9da, []int{7}
}

func (m *DeleteTopicResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTopicResponse.Unmarshal(m, b)
}
func (m *DeleteTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTopicResponse.Marshal(b, m, deterministic)
}
func (m *DeleteTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTopicResponse.Merge(m, src)
}
func (m *DeleteTopicResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteTopicResponse.Size(m)
}
func (m *DeleteTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTopicResponse proto.InternalMessageInfo

type DeleteSubscriptionRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	SubscriptionId       string   `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSubscriptionRequest) Reset()         { *m = DeleteSubscriptionRequest{} }
func (m *DeleteSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteSubscriptionRequest) ProtoMessage()    {}
func (*DeleteSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab1295f5fa4f9da, []int{8}
}

func (m *DeleteSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteSubscriptionRequest.Unmarshal(m, b)
}
func (m *DeleteSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteSubscriptionRequest.Marshal(b, m, deterministic)
}
func (m *DeleteSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSubscriptionRequest.Merge(m, src)
}
func (m *DeleteSubscriptionRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteSubscriptionRequest.Size(m)
}
func (m *DeleteSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSubscriptionRequest proto.InternalMessageInfo

func (m *DeleteSubscriptionRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *DeleteSubscriptionRequest) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

type DeleteSubscriptionResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSubscriptionResponse) Reset()         { *m = DeleteSubscriptionResponse{} }
func (m *DeleteSubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteSubscriptionResponse) ProtoMessage()    {}
func (*DeleteSubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab1295f5fa4f9da, []int{9}
}

func (m *DeleteSubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteSubscriptionResponse.Unmarshal(m, b)
}
func (m *DeleteSubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteSubscriptionResponse.Marshal(b, m, deterministic)
}
func (m *DeleteSubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSubscriptionResponse.Merge(m, src)
}
func (m *DeleteSubscriptionResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteSubscriptionResponse.Size(m)
}
func (m *DeleteSubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSubscriptionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PublishRequest)(nil), "grpc.PublishRequest")
	proto.RegisterMapType((map[string]string)(nil), "grpc.PublishRequest.MetadataEntry")
	proto.RegisterType((*PublishResponse)(nil), "grpc.PublishResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "grpc.SubscribeRequest")
	proto.RegisterMapType((map[string]string)(nil), "grpc.SubscribeRequest.FilterEntry")
	proto.RegisterType((*SubscribeResponse)(nil), "grpc.SubscribeResponse")
	proto.RegisterMapType((map[string]string)(nil), "grpc.SubscribeResponse.MetadataEntry")
	proto.RegisterType((*AckRequest)(nil), "grpc.AckRequest")
	proto.RegisterType((*AckResponse)(nil), "grpc.AckResponse")
	proto.RegisterType((*DeleteTopicRequest)(nil), "grpc.DeleteTopicRequest")
	proto.RegisterType((*DeleteTopicResponse)(nil), "grpc.DeleteTopicResponse")
	proto.RegisterType((*DeleteSubscriptionRequest)(nil), "grpc.DeleteSubscriptionRequest")
	proto.RegisterType((*DeleteSubscriptionResponse)(nil), "grpc.DeleteSubscriptionResponse")
}

func init() { proto.RegisterFile("grpc/server.proto", fileDescriptor_aab1295f5fa4f9da) }

var fileDescriptor_aab1295f5fa4f9da = []byte{
	// 550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x61, 0x6b, 0xd3, 0x50,
	0x14, 0x5d, 0xda, 0xad, 0xb3, 0xb7, 0x6e, 0x6d, 0x9f, 0x9b, 0x66, 0x61, 0x6a, 0x09, 0x88, 0x45,
	0x24, 0x95, 0x2a, 0x32, 0x27, 0x88, 0x85, 0xa9, 0x14, 0x11, 0x4a, 0x3a, 0x05, 0xfd, 0x32, 0x92,
	0xf6, 0xae, 0x3e, 0x9b, 0x36, 0xf1, 0xbd, 0x97, 0x4a, 0x7f, 0x9c, 0xff, 0xc0, 0x6f, 0x7e, 0xf7,
	0xb7, 0x48, 0xf2, 0x5e, 0xb3, 0xa4, 0xcd, 0x8a, 0xc2, 0xf6, 0x2d, 0xef, 0xe6, 0xdc, 0x7b, 0xee,
	0x39, 0xef, 0x3c, 0xa8, 0x8f, 0x58, 0x30, 0x68, 0x71, 0x64, 0x33, 0x64, 0x56, 0xc0, 0x7c, 0xe1,
	0x93, 0xcd, 0xa8, 0x64, 0xdc, 0x1b, 0xf9, 0xfe, 0xc8, 0xc3, 0x56, 0x5c, 0x73, 0xc3, 0xf3, 0xd6,
	0x0f, 0xe6, 0x04, 0x01, 0x32, 0x2e, 0x51, 0xe6, 0x4f, 0x0d, 0x76, 0x7b, 0xa1, 0xeb, 0x51, 0xfe,
	0xd5, 0xc6, 0xef, 0x21, 0x72, 0x41, 0xf6, 0x60, 0x4b, 0xf8, 0x01, 0x1d, 0xe8, 0x5a, 0x43, 0x6b,
	0x96, 0x6d, 0x79, 0x20, 0x3a, 0x6c, 0x4f, 0x90, 0x73, 0x67, 0x84, 0x7a, 0xa1, 0xa1, 0x35, 0x6f,
	0xda, 0x8b, 0x23, 0x79, 0x05, 0x37, 0x26, 0x28, 0x9c, 0xa1, 0x23, 0x1c, 0xbd, 0xd8, 0x28, 0x36,
	0x2b, 0x6d, 0xd3, 0x8a, 0xb8, 0xad, 0xec, 0x5c, 0xeb, 0x83, 0x02, 0xbd, 0x99, 0x0a, 0x36, 0xb7,
	0x93, 0x1e, 0xe3, 0x25, 0xec, 0x64, 0x7e, 0x91, 0x1a, 0x14, 0xc7, 0x38, 0x57, 0xf4, 0xd1, 0x67,
	0xb4, 0xd2, 0xcc, 0xf1, 0x42, 0x49, 0x5d, 0xb6, 0xe5, 0xe1, 0xb8, 0x70, 0xa4, 0x99, 0x75, 0xa8,
	0x26, 0x34, 0x3c, 0xf0, 0xa7, 0x1c, 0xcd, 0x3f, 0x05, 0xa8, 0xf5, 0x43, 0x97, 0x0f, 0x18, 0x75,
	0x71, 0xbd, 0xa8, 0x87, 0x50, 0xe5, 0x12, 0x19, 0x08, 0xea, 0x4f, 0xcf, 0xe8, 0x50, 0x31, 0xec,
	0xa6, 0xcb, 0xdd, 0x21, 0x39, 0x86, 0xd2, 0x39, 0xf5, 0x04, 0xb2, 0xac, 0xc2, 0x65, 0x1a, 0xeb,
	0x6d, 0x0c, 0x92, 0x0a, 0x55, 0x07, 0x79, 0x07, 0x35, 0x86, 0x02, 0xa7, 0x31, 0x43, 0x80, 0x8c,
	0xfa, 0x43, 0x7d, 0xb3, 0xa1, 0x35, 0x2b, 0xed, 0x43, 0x4b, 0xde, 0x8e, 0xb5, 0xb8, 0x1d, 0xeb,
	0x63, 0x77, 0x2a, 0x9e, 0x3f, 0xfb, 0x14, 0xc9, 0xb3, 0xab, 0x49, 0x57, 0x2f, 0x6e, 0x22, 0xef,
	0x81, 0xcc, 0x28, 0xa7, 0x2e, 0xf5, 0xa8, 0x98, 0x9f, 0x09, 0x3a, 0x41, 0x3f, 0x14, 0xfa, 0xd6,
	0x3f, 0x8c, 0xaa, 0x5f, 0xf4, 0x9d, 0xca, 0x36, 0xe3, 0x05, 0x54, 0x52, 0xcb, 0xfe, 0x97, 0xe7,
	0xbf, 0x34, 0xa8, 0xa7, 0x94, 0x4b, 0xdb, 0xc9, 0x5d, 0x00, 0x95, 0x88, 0xc8, 0x46, 0x39, 0xa8,
	0xac, 0x2a, 0xdd, 0xe1, 0x9a, 0xfc, 0x74, 0x56, 0xf2, 0xf3, 0x60, 0xc5, 0x5d, 0xc9, 0x71, 0x3d,
	0x11, 0xfa, 0x06, 0xd0, 0x19, 0x8c, 0xaf, 0x28, 0x28, 0x59, 0x17, 0x8a, 0x4b, 0x2e, 0x98, 0x3b,
	0x50, 0x89, 0xb9, 0x54, 0x54, 0x1f, 0x01, 0x39, 0x41, 0x0f, 0x05, 0x9e, 0x46, 0x2c, 0x6b, 0x57,
	0x30, 0xf7, 0xe1, 0x56, 0x06, 0xab, 0x46, 0x7c, 0x81, 0x03, 0x59, 0xee, 0xa7, 0x16, 0xb9, 0x1a,
	0x31, 0xe6, 0x21, 0x18, 0x79, 0xb3, 0x25, 0x73, 0xfb, 0x77, 0x01, 0x4a, 0xbd, 0xd0, 0xed, 0x87,
	0x2e, 0x39, 0x82, 0x6d, 0xf5, 0x0a, 0xc9, 0x5e, 0xde, 0xdb, 0x37, 0xf6, 0x97, 0xaa, 0x6a, 0xf9,
	0x0d, 0x72, 0x02, 0x95, 0x94, 0x2a, 0xa2, 0x4b, 0xdc, 0xaa, 0x29, 0xc6, 0x41, 0xce, 0x9f, 0x64,
	0xca, 0x6b, 0x28, 0x27, 0x61, 0x21, 0xb7, 0xf3, 0xdf, 0xa6, 0x71, 0xe7, 0x92, 0x54, 0x99, 0x1b,
	0x4f, 0x34, 0xf2, 0x79, 0x71, 0x13, 0x69, 0xa9, 0xe4, 0x7e, 0x9a, 0x34, 0xc7, 0x60, 0xa3, 0x71,
	0x39, 0x20, 0x59, 0xee, 0x31, 0x14, 0x3b, 0x83, 0x31, 0xa9, 0x49, 0xe8, 0x45, 0xd4, 0x8c, 0x7a,
	0xaa, 0xb2, 0x40, 0xbb, 0xa5, 0xf8, 0x01, 0x3f, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xba,
	0xb2, 0x1e, 0xd2, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PubSubClient is the client API for PubSub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubSubClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (PubSub_SubscribeClient, error)
	DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error)
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error)
}

type pubSubClient struct {
	cc *grpc.ClientConn
}

func NewPubSubClient(cc *grpc.ClientConn) PubSubClient {
	return &pubSubClient{cc}
}

func (c *pubSubClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/grpc.PubSub/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubClient) DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicResponse, error) {
	out := new(DeleteTopicResponse)
	err := c.cc.Invoke(ctx, "/grpc.PubSub/DeleteTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (PubSub_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubSub_serviceDesc.Streams[0], "/grpc.PubSub/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubSub_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type pubSubSubscribeClient struct {
	grpc.ClientStream
}

func (x *pubSubSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pubSubClient) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error) {
	out := new(DeleteSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/grpc.PubSub/DeleteSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/grpc.PubSub/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PubSubServer is the server API for PubSub service.
type PubSubServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	DeleteTopic(context.Context, *DeleteTopicRequest) (*DeleteTopicResponse, error)
	Subscribe(*SubscribeRequest, PubSub_SubscribeServer) error
	DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error)
	Ack(context.Context, *AckRequest) (*AckResponse, error)
}

// UnimplementedPubSubServer can be embedded to have forward compatible implementations.
type UnimplementedPubSubServer struct {
}

func (*UnimplementedPubSubServer) Publish(ctx context.Context, req *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedPubSubServer) DeleteTopic(ctx context.Context, req *DeleteTopicRequest) (*DeleteTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (*UnimplementedPubSubServer) Subscribe(req *SubscribeRequest, srv PubSub_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedPubSubServer) DeleteSubscription(ctx context.Context, req *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (*UnimplementedPubSubServer) Ack(ctx context.Context, req *AckRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}

func RegisterPubSubServer(s *grpc.Server, srv PubSubServer) {
	s.RegisterService(&_PubSub_serviceDesc, srv)
}

func _PubSub_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PubSub/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSub_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PubSub/DeleteTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServer).DeleteTopic(ctx, req.(*DeleteTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSub_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubSubServer).Subscribe(m, &pubSubSubscribeServer{stream})
}

type PubSub_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type pubSubSubscribeServer struct {
	grpc.ServerStream
}

func (x *pubSubSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PubSub_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PubSub/DeleteSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServer).DeleteSubscription(ctx, req.(*DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSub_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PubSub/Ack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PubSub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.PubSub",
	HandlerType: (*PubSubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PubSub_Publish_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _PubSub_DeleteTopic_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _PubSub_DeleteSubscription_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _PubSub_Ack_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PubSub_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/server.proto",
}
